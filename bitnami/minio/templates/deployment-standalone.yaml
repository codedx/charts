{{- if eq .Values.mode "standalone" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "minio.fullname" . }}
  labels: {{- include "minio.labels" . | nindent 4 }}
spec:
  {{- if .Values.deployment.updateStrategy }}
  strategy: {{ toYaml .Values.deployment.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "minio.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "minio.labels" . | nindent 8 }}
      {{- if or .Values.podAnnotations }}
      annotations: {{- include "minio.tplValue" ( dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "minio.serviceAccountName" . }}
{{- include "minio.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.affinity }}
      affinity: {{- include "minio.tplValue" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "minio.tplValue" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "minio.tplValue" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
      initContainers:
        - name: volume-permissions
          image: {{ template "minio.volumePermissions.image" . }}
          imagePullPolicy: {{ default "" .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }} {{ .Values.persistence.mountPath }}
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
      {{- end }}
      serviceAccountName: {{ include "minio.serviceAccountName" . | quote }}
      priorityClassName: {{ include "minio.priorityClassName" . | quote }}
      containers:
      - name: "minio"
        image: {{ include "minio.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
        {{- end }}
        env:
        {{- if .Values.image.debug }}
        - name: BITNAMI_DEBUG
          value: "true"
        {{- end }}
        {{- if .Values.useCredentialsFile }}
        - name: MINIO_ACCESS_KEY_FILE
          value: "/opt/bitnami/minio/secrets/access-key"
        {{- else }}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "minio.secretName" . }}
              key: access-key
        {{- end }}
        {{- if .Values.useCredentialsFile }}
        - name: MINIO_SECRET_KEY_FILE
          value: "/opt/bitnami/minio/secrets/secret-key"
        {{- else }}
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "minio.secretName" . }}
              key: secret-key
        {{- end }}
        {{- if (and (not .Values.tls.enabled) .Values.defaultBuckets) }}
        - name: MINIO_DEFAULT_BUCKETS
          value: {{ .Values.defaultBuckets }}
        {{- end }}
        {{- if .Values.tls.enabled  }}
        - name: MINIO_SKIP_CLIENT
          value: "yes"
        {{- end }}
        - name: MINIO_BROWSER
          value: {{ ternary "off" "on" .Values.disableWebUI | quote }}
{{- if .Values.extraEnv }}
{{ toYaml .Values.extraEnv | indent 8 }}
{{- end }}
        ports:
        - name: minio
          containerPort: 9000
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          httpGet:
            path: /minio/health/live
            port: minio
            {{- if .Values.tls.enabled }}
            scheme: HTTPS
            {{ else }}
            scheme: HTTP
            {{- end }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          tcpSocket:
            port: minio
        {{- end }}
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.useCredentialsFile }}
        - name: minio-credentials
          secret:
            secretName: {{ include "minio.secretName" . }}
        {{- end }}
        - name: "data"
          mountPath: {{ .Values.persistence.mountPath }}
        {{- if .Values.tls.enabled }}
        - name: cert-secret-volume
          mountPath: /certs
        {{- end }}
      volumes:
      {{- if .Values.useCredentialsFile }}
      - name: minio-credentials
        secret:
          secretName: {{ include "minio.secretName" . }}
      {{- end }}
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ include "minio.fullname" . }}{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.tls.enabled }}
      - name: cert-secret-volume
        secret:
          secretName: {{ .Values.tls.certSecret }}
          items:
          - key: {{ .Values.tls.publicCrt }}
            path: public.crt
          - key: {{ .Values.tls.privateKey }}
            path: private.key
          - key: {{ .Values.tls.publicCrt }}
            path: CAs/public.crt
      {{ end }}
 {{- end }}
